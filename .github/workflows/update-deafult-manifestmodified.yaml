# This github workflow updates default_manifest_conf.json in st manifest s3 folder

# This github workflow called update-default-manifest does following things 
# 1) updates default_manifest_conf.json specifying default st manifest for given cluster
# inputs :  default_st_manifest_name, zeus_cluster_name


# Flow
# Triggered manually by passing appropriate inputs
# 'update_default_manifest_eng_clusters' job updates default manifest value for given dev or qa or seprod zeus cluster in eng s3 bucket

# 'update_default_manifest_prod_clusters' job updates default manifest value for given stage or prod zeus cluster in prod s3 bucket
## this job has following protection rules through github environment(`Prod`)
#### `Prod` github env is configured with following protections
#### 1) It runs only when GH workflow is triggered from main branch
#### 2) It waits for approvals from one of member of Alation/teams/ci_cd_demote_manifest_admins team

run-name: "Set default st manifest ${{ inputs.default_st_manifest_name }} for ${{ inputs.zeus_clusters }}"

env:
  AWS_DEFAULT_REGION: us-east-2
  S3_MANIFEST_ENG_BUCKET: s3://alation-eng-st-manifests # S3 bucket of eng aws account
  S3_MANIFEST_PROD_BUCKET: s3://alation-prod-st-manifests # S3 bucket of prod aws account
  DEFAULT_MANIFEST_FILE_NAME: default_manifest_conf.json
  APPROVED_ZEUS_CLUSTER_LIST: devlopment-enterprise,development-enterprise-use1,development-shared,qa-enterprise-use1,qa-enterprise-use2,qa-shared,seprod-enterprise-use1,stage-enterprise-use2,prod-enterprise-use1,prod-enterprise-usw2,prod-shared-use1,prod-enterprise-apne1,prod-enterprise-apse1,prod-enterprise-apse2,prod-enterprise-euc1,prod-enterprise-euw1

jobs:
  parseinputs:
    outputs:
      GIVEN_ENG_CLUSTERS: ${{ steps.parsing_information.outputs.GIVEN_ENG_CLUSTERS }}
      GIVEN_PROD_CLUSTERS: ${{ steps.parsing_information.outputs.GIVEN_PROD_CLUSTERS }}
      IS_ANY_ENG_CLUSTER: ${{ steps.parsing_information.outputs.IS_ANY_ENG_CLUSTER }}
      IS_ANY_PROD_CLUSTER: ${{ steps.parsing_information.outputs.IS_ANY_PROD_CLUSTER }} 
    runs-on: ubuntu-20.04
    steps:
    - name: check
      uses: actions/checkout@v2

    - name: parse
      run: |
        import os
        given_clusters = "${{ inputs.zeus_clusters }}".split(',')
        approved_clusters = "${{ env.APPROVED_ZEUS_CLUSTER_LIST }}".split(',')
        
        print(f"Given zeus clusters are {given_clusters}")
        print(f"Approved zeus clusters are {approved_clusters}")
        if not all(item in approved_clusters for item in given_clusters):
          print(f"Given zeus cluster list -> {given_clusters} is not subset of Approved zeus cluster list -> {approved_clusters}")
          print("Hence. Terminating execution...")
          exit(1)

        is_any_eng_cluster = "false"
        is_any_prod_cluster = "false"
        eng_clusters =  [] 
        prod_clusters = []

        for item in given_clusters:
          if 'stage' in item or ('prod' in item and 'seprod' not in item):
            print(f"cluster -> {item} is of prod type")
            prod_clusters.append(item)
          else:
            print(f"cluster -> {item} is of eng type")
            eng_clusters.append(item)
        
        if eng_clusters:
          print("there are some eng clusters")
          is_any_eng_cluster = "true"
        if prod_clusters:
          print("there are some prod clusters")
          is_any_prod_cluster = "true"
         
        # exporting github env variable
        with open(os.environ['GITHUB_ENV'], 'a') as fh:
          print(f'IS_ANY_ENG_CLUSTER={is_any_eng_cluster}', file=fh)
          print(f'IS_ANY_PROD_CLUSTER={is_any_prod_cluster}', file=fh)
          print(f'GIVEN_ENG_CLUSTERS={eng_clusters}', file=fh)
          print(f'GIVEN_PROD_CLUSTERS={prod_clusters}', file=fh)
      
      shell: python

    - name: Outputting parsing information for later use
      id: parsing_information
      run: |
           # storing vars in github output (so that other jobs can use it)
           echo "GIVEN_ENG_CLUSTERS=${{ env.GIVEN_ENG_CLUSTERS }}" >> "$GITHUB_OUTPUT"
           echo "GIVEN_PROD_CLUSTERS=${{ env.GIVEN_PROD_CLUSTERS }}" >> "$GITHUB_OUTPUT"
           echo "IS_ANY_ENG_CLUSTER=${{ env.IS_ANY_ENG_CLUSTER }}" >> "$GITHUB_OUTPUT"
           echo "IS_ANY_PROD_CLUSTER=${{ env.IS_ANY_PROD_CLUSTER }}" >> "$GITHUB_OUTPUT"

  somejob:
    needs: parseinputs
    if: ${{ needs.parseinputs.outputs.GIVEN_ENG_CLUSTERS != '[]' }}
    runs-on: ubuntu-20.04
    steps:
    - name: test
      run: |
        echo "${{ needs.parseinputs.outputs.GIVEN_ENG_CLUSTERS }}"

  update_default_manifest_eng_clusters:
    needs: parseinputs
    if: ${{ fromJSON(needs.parseinputs.outputs.IS_ANY_ENG_CLUSTER) }}
    runs-on: ubuntu-20.04
    steps:

    - name: Check out repository code
      uses: actions/checkout@v2

    - name: Output Inputs
      run: |
        touch ${{ env.DEFAULT_MANIFEST_FILE_NAME }} 
        echo "${{ toJSON(github.event.inputs) }}"           

    - name: Update default manifest for given eng zeus cluster/s
      run: |
        import json; 
        import os;
        print("given eng clusters are --> ${{ needs.parseinputs.outputs.GIVEN_ENG_CLUSTERS }}")
        defaultmanifestdict = {}
        for item in ${{ needs.parseinputs.outputs.GIVEN_ENG_CLUSTERS }}:
          defaultmanifestdict[item] = "${{ inputs.default_st_manifest_name }}"
        
        print(f"defaultmanifestdict is {defaultmanifestdict}")
        
        file=open("./${{ env.DEFAULT_MANIFEST_FILE_NAME }}", "w+");
        json.dump(defaultmanifestdict, file, indent=4);
        file.close()
      shell: python

    - name: Printing file
      run: |
        cat ${{ env.DEFAULT_MANIFEST_FILE_NAME }}

on:
  workflow_dispatch:
    inputs:
      zeus_clusters:
        description: "comma seperated list of zeus clusters"
        required: true
        type: string
      default_st_manifest_name:
        description: Default st manifest to set for cluster (for-ex 2023.1.7-mthelm-0.161.0-alation-16.7.0-41637)
        required: true
        type: string     
permissions:
  contents: read
  id-token: write
